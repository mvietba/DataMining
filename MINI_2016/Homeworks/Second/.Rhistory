student_mat <- read.csv(file="C:/Users/maiv/Downloads/student-mat.csv", header=TRUE, sep=";", encoding="UTF-8")
student_mat <- read.csv(file="C:/Users/vietba/Downloads/student-mat.csv", header=TRUE, sep=";", encoding="UTF-8")
View(student_mat)
student_mat <- read.csv(file="C:/Users/vietba/Downloads/student-mat.csv", header=TRUE, sep=";", encoding="UTF-8")
View(student_mat)
View(student_mat)
student_mat <- read.csv(file="C:/Users/vietba/Downloads/student-mat.csv", header=TRUE, sep=";", encoding="UTF-8")
View(student_mat)
View(student_mat)
install.packages("caret")
library(caret)
set.seed(1313)
indxTrain <- createDataPartition(y = studentnew$Class, p = 0.75)
str(indxTrain)
set.seed(1313)
indxTrain <- createDataPartition(y = student_mat$Class, p = 0.75)
str(indxTrain)
set.seed(1313)
indxTrain <- createDataPartition(y = student_mat$Class, p = 0.75)
indxTrain <- createDataPartition(y = student_mat$Dalc, p = 0.75)
str(indxTrain)
stdntmatTrain <- student_mat[indxTrain$Resample1,]
stdntmatTest <- student_mat[-indxTrain$Resample1,]
indxTrain <- createDataPartition(y = student_mat$Dalc, p = 0.75)
str(indxTrain)
stdntmatTrain <- student_mat[indxTrain$Resample1,]
stdntmatTest <- student_mat[-indxTrain$Resample1,]
knnFit <- knn3(Dalc ~ studytime + age + health + absences + failures, data = stdntmatTrain, k=1)
pred <- predict(knnFit, stdntmatTest, type="class")
tab <- table(true = stdntmatTest$Dalc, predicted = pred)
View(stdntmatTrain)
View(stdntmatTrain)
View(stdntmatTrain)
View(stdntmatTrain)
knnFit <- knn3(Dalc ~ studytime + age + health + absences + failures, data = stdntmatTrain, k=5, prob=TRUE)
pred <- predict(knnFit, stdntmatTest, type="class")
tab <- table(true = stdntmatTest$Dalc, predicted = pred)
tab
pred
studentnew <- within(student_mat, Dalc <- factor(Dalc))
indxTrain <- createDataPartition(y = studentnew$Dalc, p = 0.75)
str(indxTrain)
stdntmatTrain <- studentnew[indxTrain$Resample1,]
stdntmatTest <- studentnew[-indxTrain$Resample1,]
knnFit <- knn3(Dalc ~ studytime + age + health + absences + failures, data = stdntmatTrain, k=5, prob=TRUE)
pred <- predict(knnFit, stdntmatTest, type="class")
pred
tab <- table(true = stdntmatTest$Dalc, predicted = pred)
tab
tab2 <- prop.table(tab, 1)
sum(diag(tab)) / sum(tab)
sum(diag(tab2)) / sum(tab2)
tuneK <- 1:200
performance <- sapply(tuneK, function(k) {
knnFit <- knn3(Dalc ~ studytime + age + health + absences + failures, data = stdntmatTrain, k=k)
tab <- table(true = stdntmatTest$Dalc,
predict = predict(knnFit, stdntmatTest, type="class"))
sum(diag(tab)) / sum(tab)
})
warnings()
df <- data.frame(tuneK, performance)
ggplot(df, aes(tuneK, performance)) +
geom_point() +
geom_smooth(se=FALSE, span=0.1, size=2) +
theme_bw()
tuneK <- 1:1000
performance <- sapply(tuneK, function(k) {
knnFit <- knn3(Dalc ~ studytime + age + health + absences + failures, data = stdntmatTrain, k=k)
tab <- table(true = stdntmatTest$Dalc,
predict = predict(knnFit, stdntmatTest, type="class"))
sum(diag(tab)) / sum(tab)
})
warnings()
df <- data.frame(tuneK, performance)
ggplot(df, aes(tuneK, performance)) +
geom_point() +
geom_smooth(se=FALSE, span=0.1, size=2) +
theme_bw()
---
title: "DMA - Homework 2"
author: "Viet Ba Mai"
date: "14 paÄ¹ÅŸdziernika 2016"
output:
html_document:
toc: TRUE
---
#Loading data from csv file
```{r, cache=TRUE}
student_mat <- read.csv(file="C:/Users/vietba/Downloads/student-mat.csv", header=TRUE, sep=";", encoding="UTF-8")
```
#Input data
Below 10 first observations of the imported table are presented.
```{r, echo=FALSE, cache=TRUE}
head(student_mat, 10)
```
I chose the `Dalc` column as the target class. This column stands for workday alcohol consumption.
However factor needs to be applied on the `Dalc` variable in order to use it as the ideal value.
Below are selected columns from the table with factored response variable:
```{r, cache=TRUE}
#install.packages("caret")
library(caret)
studentnew <- within(student_mat, Dalc <- factor(Dalc))
head(studentnew[, c("studytime", "age", "health", "absences", "failures")], 10)
```
#Preparing training and testing set
We divide the student_mat set into training and testing set with their ratio being 3:1 respectively.
```{r, cache=TRUE}
set.seed(1313)
indxTrain <- createDataPartition(y = studentnew$Dalc, p = 0.75)
str(indxTrain)
stdntmatTrain <- studentnew[indxTrain$Resample1,]
stdntmatTest <- studentnew[-indxTrain$Resample1,]
```
#Train and test
Traing classifier on the training set `stdntmatTrain`.
```{r, cache=TRUE}
knnFit <- knn3(Dalc ~ studytime + age + health + absences + failures, data = stdntmatTrain, k=5, prob=TRUE)
```
Testing on the testing set `stdntmatTest`.
```{r, cache=TRUE}
pred <- predict(knnFit, stdntmatTest, type="class")
tab <- table(true = stdntmatTest$Dalc, predicted = pred)
tab2 <- prop.table(tab, 1)
tab2
sum(diag(tab)) / sum(tab)
sum(diag(tab2)) / sum(tab2)
```
#Optimal k and performance
Now we can find the opitmal value of `k`.
For this task we can assume that the best value would be the one which yields the highest value for performance.
```{r, echo=TRUE, message=FALSE, warning=FALSE, cache=FALSE}
tuneK <- 1:1000
performance <- sapply(tuneK, function(k) {
knnFit <- knn3(Dalc ~ studytime + age + health + absences + failures, data = stdntmatTrain, k=k)
tab <- table(true = stdntmatTest$Dalc,
predict = predict(knnFit, stdntmatTest, type="class"))
tab2 <- prop.table(tab, 1)
tab2
sum(diag(tab)) / sum(tab)
})
```
#Performance plot
```{r, cache=TRUE}
warnings()
df <- data.frame(tuneK, performance)
ggplot(df, aes(tuneK, performance)) +
geom_point() +
geom_smooth(se=FALSE, span=0.1, size=2) +
theme_bw()
```
geom_smooth(se=FALSE, span=0.1, size=2) +
theme_bw()
```
data(GermanCredit)
set.seed(3214)
indxTrain <- createDataPartition(y = GermanCredit$Class, p = 0.75)
str(indxTrain)
trainSet <- GermanCredit[indxTrain$Resample1,]
testSet <- GermanCredit[-indxTrain$Resample1,]
tuneK <- 1:200
performance <- sapply(tuneK, function(k) {
knnFit <- knn3(Class ~ Age+Amount+Duration+NumberExistingCredits+CreditHistory.PaidDuly, data = trainSet, k=k)
tab <- table(true = testSet$Class,
predict = predict(knnFit, testSet, type="class"))
tab2 <- prop.table(tab, 1)
sum(diag(tab)) / sum(tab)
})
df <- data.frame(tuneK, performance)
ggplot(df, aes(tuneK, performance)) +
geom_point() +
geom_smooth(se=FALSE, span=0.1, size=2) +
theme_bw()
knnFit <- knn3(Class ~ Duration+Amount+Age+ResidenceDuration+NumberExistingCredits, data = GermanCredit, k=40, prob=TRUE)
knnFit
pred <- predict(knnFit, data.frame(Amount = 1100, Duration = 24, NumberExistingCredits= 3, Age = 30, ResidenceDuration = 4))
t(pred)
par(mar=c(5,3,2,2))
barplot(pred, las=2)
# majority voting
pred <- predict(knnFit, data.frame(Amount = 1100, Duration = 24, NumberExistingCredits= 3, Age = 30, ResidenceDuration = 4), type="class")
pred <- predict(knnFit, stdntmatTest, type="class")
barplot(pred)
pred <- predict(knnFit, data.frame(Amount = 1100, Duration = 24, NumberExistingCredits= 3, Age = 30, ResidenceDuration = 4), type="class"
pred <- predict(knnFit, stdntmatTest, type="class")
pred <- predict(knnFit, stdntmatTest, type="class")
set.seed(1313)
indxTrain <- createDataPartition(y = studentnew$Dalc, p = 0.75)
str(indxTrain)
stdntmatTrain <- studentnew[indxTrain$Resample1,]
stdntmatTest <- studentnew[-indxTrain$Resample1,]
knnFit <- knn3(Dalc ~ studytime + age + health + absences + failures, data = stdntmatTrain, k=10, prob=TRUE)
pred <- predict(knnFit, stdntmatTest, type="class")
t(pred)
par(mar=c(5,3,2,2))
barplot(pred)
student_mat <- read.csv(file="C:/Users/vietba/Downloads/student-mat.csv", header=TRUE, sep=";", encoding="UTF-8")
View(student_mat)
View(student_mat)
head(studentnew[, c("Dalc", "studytime", "age", "absences", "failures", "freetime", "goout", "absences")], 10)"
sum(diag(tab)) / sum(tab)
studentnew <- within(student_mat, Dalc <- factor(Dalc))
set.seed(1313)
indxTrain <- createDataPartition(y = studentnew$Dalc, p = 0.75)
str(indxTrain)
stdntmatTrain <- studentnew[indxTrain$Resample1,]
stdntmatTest <- studentnew[-indxTrain$Resample1,]
knnFit <- knn3(Dalc ~ studytime + age + absences + failures + freetime + goout, data = stdntmatTrain, k=1, prob=TRUE)
pred <- predict(knnFit, stdntmatTest, type="class")
tab <- table(true = stdntmatTest$Dalc, predicted = pred)
knnFit <- knn3(Dalc ~ studytime + age + absences + failures + freetime + goout, data = stdntmatTrain, k=1, prob=TRUE)
knnFit <- knn3(Dalc ~ studytime + age + absences + failures + freetime + goout, data = stdntmatTrain, k=1, prob=TRUE)
library(caret)
knnFit <- knn3(Dalc ~ studytime + age + absences + failures + freetime + goout, data = stdntmatTrain, k=1, prob=TRUE)
set.seed(1313)
indxTrain <- createDataPartition(y = studentnew$Dalc, p = 0.75)
str(indxTrain)
stdntmatTrain <- studentnew[indxTrain$Resample1,]
stdntmatTest <- studentnew[-indxTrain$Resample1,]
studentnew <- within(student_mat, Dalc <- factor(Dalc))
indxTrain <- createDataPartition(y = studentnew$Dalc, p = 0.75)
str(indxTrain)
stdntmatTrain <- studentnew[indxTrain$Resample1,]
stdntmatTest <- studentnew[-indxTrain$Resample1,]
knnFit <- knn3(Dalc ~ studytime + age + absences + failures + freetime + goout, data = stdntmatTrain, k=1, prob=TRUE)
pred <- predict(knnFit, stdntmatTest, type="class")
tab <- table(true = stdntmatTest$Dalc, predicted = pred)
sum(diag(tab)) / sum(tab)
knnFit <- knn3(Dalc ~ studytime + age + absences + failures + freetime + goout, data = stdntmatTrain, k=15, prob=TRUE)
pred <- predict(knnFit, stdntmatTest, type="class")
tab <- table(true = stdntmatTest$Dalc, predicted = pred)
sum(diag(tab)) / sum(tab)
knnFit <- knn3(Dalc ~ studytime + age + absences + failures + freetime + goout, data = stdntmatTrain, k=30, prob=TRUE)
pred <- predict(knnFit, stdntmatTest, type="class")
tab <- table(true = stdntmatTest$Dalc, predicted = pred)
sum(diag(tab)) / sum(tab)
knnFit <- knn3(Dalc ~ studytime + age + absences + failures + freetime + goout, data = stdntmatTrain, k=20, prob=TRUE)
pred <- predict(knnFit, stdntmatTest, type="class")
tab <- table(true = stdntmatTest$Dalc, predicted = pred)
sum(diag(tab)) / sum(tab)
tuneK <- 1:100
performance <- sapply(tuneK, function(k) {
knnFit <- knn3(Dalc ~ studytime + age + absences + failures + freetime + goout, data = stdntmatTrain, k=k)
tab <- table(true = stdntmatTest$Dalc,
predict = predict(knnFit, stdntmatTest, type="class"))
tab2 <- prop.table(tab, 1)
tab2
sum(diag(tab)) / sum(tab)
})
optimal_k = which.max(performance)
optimal_k
performance[optimal_k]
df <- data.frame(tuneK, performance)
ggplot(df, aes(tuneK, performance)) +
geom_point() +
geom_smooth(se=FALSE, span=0.1, size=2) +
theme_bw()
sum(diag(tab)) / sum(tab)
